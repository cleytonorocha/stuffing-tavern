services:

  client:
    container_name: client
    build: './client'
    depends_on:
      - client-db
      - kafka
    networks:
      - orchestrator-saga
    environment:
      - KAFKA_BROKER=kafka:29092
      - DB_HOST=client-db
      - DB_PORT=5432
      - DB_NAME=client-db
      - DB_USER=admin
      - DB_PASSWORD=admin
    ports:
      - 8090:8090


  client-db:
    container_name: client-db
    image: postgres:latest
    environment:
      POSTGRES_DB: clientDb
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      PGDATA: /data/postgres
    networks:
      - orchestrator-saga
    ports:
      - "5432:5432"

  
  
  inventory:
    container_name: inventory
    build: './inventory'
    depends_on:
      - inventory-db
      - kafka
    networks:
      - orchestrator-saga
    environment:
      - KAFKA_BROKER=kafka:29092
      - DB_HOST=inventory-db
      - DB_PORT=5433
      - DB_NAME=inventory-db
      - DB_USER=admin
      - DB_PASSWORD=admin
    ports:
      - 8091:8091


  inventory-db:
    container_name: inventory-db
    image: postgres:latest
    environment:
      POSTGRES_DB: inventory-db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      PGDATA: /data/postgres
    networks:
      - orchestrator-saga
    ports:
      - "5433:5432"


  
  
  notification:
    container_name: notification
    build: './notification'
    depends_on:
      - notification-db
      - kafka
    networks:
      - orchestrator-saga
    environment:
      - KAFKA_BROKER=kafka:29092
      - DB_HOST=notification-db
      - DB_PORT=5434
      - DB_NAME=notification-db
      - DB_USER=admin
      - DB_PASSWORD=admin
    ports:
      - 8092:8092


  notification-db:
    container_name: notification-db
    image: postgres:latest
    environment:
      POSTGRES_DB: notification-db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      PGDATA: /data/postgres
    networks:
      - orchestrator-saga
    ports:
      - "5434:5432"
  


  order:
    container_name: order
    build: './order'
    depends_on:
      - order-db
      - kafka
    networks:
      - orchestrator-saga
    environment:
      - KAFKA_BROKER=kafka:29092
      - DB_HOST=order-db
      - DB_PORT=5435
      - DB_NAME=order-db
      - DB_USER=admin
      - DB_PASSWORD=admin
    ports:
      - 8093:8093


  order-db:
    container_name: order-db
    image: postgres:latest
    environment:
      POSTGRES_DB: order-db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      PGDATA: /data/postgres
    networks:
      - orchestrator-saga
    ports:
      - "5435:5432"

  


  payment:
    container_name: payment
    build: './payment'
    depends_on:
      - payment-db
      - kafka
    networks:
      - orchestrator-saga
    environment:
      - KAFKA_BROKER=kafka:29092
      - DB_HOST=payment-db
      - DB_PORT=5436
      - DB_NAME=payment-db
      - DB_USER=admin
      - DB_PASSWORD=admin
    ports:
      - 8094:8094


  payment-db:
    container_name: payment-db
    image: postgres:latest
    environment:
      POSTGRES_DB: payment-db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      PGDATA: /data/postgres
    networks:
      - orchestrator-saga
    ports:
      - "5436:5432"



  product:
    container_name: product
    build: './product'
    depends_on:
      - product-db
      - kafka
    networks:
      - orchestrator-saga
    environment:
      - KAFKA_BROKER=kafka:29092
      - DB_HOST=product-db
      - DB_PORT=5437
      - DB_NAME=product-db
      - DB_USER=admin
      - DB_PASSWORD=admin
    ports:
      - 8095:8095


  product-db:
    container_name: product-db
    image: postgres:latest
    environment:
      POSTGRES_DB: product-db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      PGDATA: /data/postgres
    networks:
      - orchestrator-saga
    ports:
      - "5437:5432"



  orchestrator:
    build: "./orchestrator"
    container_name: orchestrator
    depends_on:
      - kafka
    networks:
      - orchestrator-saga
    environment:
      - KAFKA_BROKER=kafka:29092
    ports:
      - 3000:3000



  kafka:
    container_name: kafka
    image: obsidiandynamics/kafka
    restart: "no"
    ports:
      - "2181:2181"
      - "9092:9092"
    networks:
      - orchestrator-saga
    environment:
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
    volumes:
      - ./data/kafka/data:/var/lib/kafka/data

  admin:
    image: adminer
    restart: always
    ports:
      - 9000:8080
    networks:
      - orchestrator-saga

networks:
  orchestrator-saga:
    driver: bridge